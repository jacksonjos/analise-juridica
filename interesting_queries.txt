##############################################
Criar backup de base de dados
mongodump --db DJs 
tar -zcvf newdump_`date "+%Y-%m-%d"`.tar.gz dump/

descompactar tar.gz
mongorestore --db DJs dump/DJs/

# se mongo for 3.2+ usar linha abaixo
mongorestore --gzip --archive=dump_2016-02-26.gz

compactar inteiros teores
ir para diretório scrapy/inteiros_teores
tar -cvzf inteiros_teores.tar.gz full/

descompactar:
tar -xvzf inteiros_teores.tar.gz
###############################################

#####   Como entrar no mongodb ##########
mongo
use DJs

########    Para remover database    ###########
use DJs
db.dropDatabase()


https://docs.mongodb.org/manual/reference/operator/update/set/

db.acordaos.find({similares:{$exists: true}}, {similares:1, similaresTexto:1, _id:0}).pretty()

db.acordaos.remove({})

# Para saber se existem acórdaos repetidos na base de dados
db.decisoes_monocraticas.aggregate(
    {"$group" : { "_id": {cabecalho: "$cabecalho", acordaoId: "$acordaoId"}, "count": { "$sum": 1 } } },
    {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } }, 
    {"$project": {"cabecalho" : "$_id", "_id" : 0} }
)

db.decisoes_monocraticas.aggregate(
    {"$group" : { "_id": {cabecalho: "$cabecalho", publicacao: "$publicacao", acordaoId: "$acordaoId"}, uniqueIds: { $addToSet: "$_id" }, "count": { "$sum": 1 } } },
    {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } }
)

db.acordaos.aggregate(
    {"$group" : { "_id": {files: "$files"}, uniqueIds: { $addToSet: "$_id" }, "count": { "$sum": 1 } } },
    {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } }
)

db.decisoes_monocraticas.aggregate(
    { $group : {_id : "$acordaoId", total : { $sum : 1 } },
    { $match : { total : { $gte : 2 } } },
    { $sort : {total : -1} },
    { $limit : 5 }
    );

db.decisoes_monocraticas.aggregate(
    { $group : {_id : "$acordaoId", total : { $sum : 1 } },
    { $match : { total : { $gte : 2 } } }
    ).toArray().length;


######## Comando para alterar ou inserir informações de um documento do db ##############
db.acordaos.update({ "_id" : ObjectId("57c9f2c13413e92206cf0e71")}, {"$set": {"similares" : [ { "dataJulg" : ISODate("2014-11-11T00:00:00Z"), "acordaoId" : "INQ 3696", "relator" : "TEORI ZAVASCKI", "orgaoJulg" : "02", "localSigla" : "DF" } ]} })


db.decisoes_monocraticas.createIndex( { cabecalho: 1, publicacao: 1, acordaoId: 1 }, { unique: true } )


db.acordaos.find({$and: [{citacoes:{$eq:[]}}, {observacao:{$ne:""}}]}, {citacoes:1, observacao:1}).pretty()

db.decisoes_monocraticas.find({citacoes:{$ne:[]}}, {citacoes:1, observacao:1}).pretty()


acórdãos que possui todos os atributos não nulos
db.acordaos.find({ $and: [
    { observacao: { $exists: true, $ne: "" } },
    { decisao: { $exists: true, $ne: "" } },
    { doutrinas: { $exists: true, $ne: "" } },
    { citacoes: { $exists: true, $ne:[] } },
    { legislacao: { $exists: true, $ne:[] } },
    { similares: { $exists: true, $ne:[] } },
    { partes: { $exists: true, $ne:[] } },
    { tags: { $exists: true, $ne:[ "VIDE EMENTA" ] } },
    { ementa: { $exists: true, $ne: "" } },
    { acordaoId: { $exists: true } },
    { acordaoType: { $exists: true } },
    { cabecalho: { $exists: true } },
    { dataJulg: { $exists: true } },
    { dataPublic: { $exists: true } },
    { local: { $exists: true } },
    { localSigla: { $exists: true } },
    { orgaoJulg: { $exists: true } },
    { publicacao: { $exists: true } },
    { relator: { $exists: true } },
    { tribunal: { $exists: true } },
] })

db.decisoes_monocraticas.find({ $and: [
    { observacao: { $exists: true, $ne: "" } },
    { decisao: { $exists: true, $ne: "" } },
    { legislacao: { $exists: true, $ne:[] } },
    { similares: { $exists: true, $ne:[] } },
    { acordaoId: { $exists: true }},
    { acordaoType: { $exists: true }},
    { cabecalho: { $exists: true }},
    { dataJulg: { $exists: true }},
    { dataPublic: { $exists: true }},
    { index: { $exists: true }},
    { local: { $exists: true }},
    { localSigla: { $exists: true }},
    { partes: { $exists: true }},
    { publicacao: { $exists: true }},
    { relator: { $exists: true }},
    { tribunal: { $exists: true }}
] })


######    obter chaves//campos/atributos de uma collection do db    ########
mr = db.runCommand({
  "mapreduce" : "decisoes_monocraticas",
  "map" : function() {
    for (var key in this) { emit(key, null); }
  },
  "reduce" : function(key, stuff) { return null; }, 
  "out": "decisoes_monocraticas" + "_keys"
})


